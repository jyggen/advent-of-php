<?php

declare(strict_types=1);

/*
 * This file is part of boo/advent-of-php.
 *
 * (c) Jonas Stendahl <jonas@stendahl.me>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

require_once dirname(__DIR__).'/vendor/autoload.php';

function count_pixels(array $program): int
{
    return array_reduce($program, static function (int $carry, array $row): int {
        $values = array_count_values($row);

        if (!array_key_exists('#', $values)) {
            return $carry;
        }

        return $carry + $values['#'];
    }, 0);
}

function enhance(array $enhancements, array $program): array
{
    $size = (0 === count($program[0]) % 2) ? 2 : 3;
    $grids = count($program[0]) / $size;
    $newProgram = [];

    for ($i = 0; $i < $grids; ++$i) {
        for ($j = 0; $j < $grids; ++$j) {
            $lowerY = $i * $size;
            $lowerX = $j * $size;
            $upperY = $lowerY + $size;
            $upperX = $lowerX + $size;
            $states = [];

            for ($y = $lowerY; $y < $upperY; ++$y) {
                $states[0][$y] = [];

                for ($x = $lowerX; $x < $upperX; ++$x) {
                    $states[0][$y][] = $program[$y][$x];
                }
            }

            $states[0] = array_values($states[0]);
            $states[1] = rotate($states[0]);
            $states[2] = rotate($states[1]);
            $states[3] = rotate($states[2]);
            $states[4] = flip($states[0]);
            $states[5] = flip($states[1]);
            $states[6] = flip($states[2]);
            $states[7] = flip($states[3]);
            $states = array_map(static function (array $state): string {
                return implode('/', array_map(static function (array $row): string {
                    return implode('', $row);
                }, $state));
            }, $states);

            $enhancement = array_reduce($states, static function (?array $carry, string $state) use ($enhancements, $size) {
                if (null !== $carry) {
                    return $carry;
                }

                if (array_key_exists($state, $enhancements[$size])) {
                    return $enhancements[$size][$state];
                }

                return $carry;
            });

            if (null === $enhancement) {
                return $program; // let's assume we're done!
            }

            $buffer = count($enhancement) * $i;

            foreach ($enhancement as $row => $columns) {
                foreach ($columns as $column) {
                    $newProgram[$row + $buffer][] = $column;
                }
            }
        }
    }

    return $newProgram;
}

function flip(array $grid): array
{
    return array_map(static function (array $row): array {
        return array_reverse($row);
    }, $grid);
}

function rotate(array $grid): array
{
    $size = count($grid[0]);
    $newGrid = array_fill(0, $size, array_fill(0, $size, null));

    for ($y = 0; $y < $size; ++$y) {
        for ($x = 0; $x < $size; ++$x) {
            $newGrid[$size - $x - 1][$y] = $grid[$y][$x];
        }
    }

    return $newGrid;
}

$input = read_input($argv, __FILE__, __COMPILER_HALT_OFFSET__);
$enhancements = [
    2 => [],
    3 => [],
];

foreach (explode("\n", $input) as $enhancement) {
    [$from, $to] = explode(' => ', $enhancement);
    $toParts = explode('/', $to);
    $enhancements[substr_count($from, '/') + 1][$from] = array_map(static function (string $row): array {
        return str_split($row);
    }, $toParts);
}

$program = [
    ['.', '#', '.'],
    ['.', '.', '#'],
    ['#', '#', '#'],
];

for ($i = 0; $i < 18; ++$i) {
    $program = enhance($enhancements, $program);

    if (4 === $i) {
        echo count_pixels($program).PHP_EOL;
    }
}

echo count_pixels($program).PHP_EOL;

__halt_compiler();
../.. => #.#/.#./...
#./.. => .../..#/..#
##/.. => .#./##./###
.#/#. => ..#/#../##.
##/#. => ##./..#/#.#
##/## => ###/###/.##
.../.../... => ...#/#.##/.##./#..#
#../.../... => .###/#.##/##.#/##.#
.#./.../... => #.../.###/..#./#.##
##./.../... => .#.#/.###/##../#.##
#.#/.../... => .##./..../##.#/#...
###/.../... => ..##/.#.#/###./#..#
.#./#../... => .#.#/##.#/.#.#/.##.
##./#../... => ###./.###/#.../...#
..#/#../... => #.##/##../.#../.##.
#.#/#../... => ..##/..../..##/...#
.##/#../... => ####/#..#/.#../....
###/#../... => ##../..#./##../....
.../.#./... => .###/...#/#.../#...
#../.#./... => .#../.#.#/..##/#.#.
.#./.#./... => ##.#/####/.#.#/##..
##./.#./... => ..../.###/#.#./..##
#.#/.#./... => ..#./..#./..../....
###/.#./... => ###./..../..#./....
.#./##./... => ..../.##./##.#/....
##./##./... => ..#./.#../..##/#...
..#/##./... => #.##/.##./..#./.##.
#.#/##./... => .###/#.../##.#/..#.
.##/##./... => ###./##../..#./..##
###/##./... => ..#./.##./.###/#..#
.../#.#/... => ###./#.../####/#.#.
#../#.#/... => .##./.#../#.##/.#..
.#./#.#/... => .#../##../..##/.#.#
##./#.#/... => ###./#.#./##.#/##..
#.#/#.#/... => #.../.##./#.##/#.#.
###/#.#/... => ###./..##/#.##/###.
.../###/... => ##../...#/#.#./#.#.
#../###/... => .#../...#/##.#/####
.#./###/... => #.#./..##/#.#./.##.
##./###/... => ..##/..##/.###/#...
#.#/###/... => ####/##../..../#..#
###/###/... => ...#/#.##/#.##/#.#.
..#/.../#.. => .#.#/..##/#.##/#..#
#.#/.../#.. => ...#/..#./##../#..#
.##/.../#.. => ####/##../..../##..
###/.../#.. => ..#./..#./##.#/#..#
.##/#../#.. => .#../####/.###/#..#
###/#../#.. => ####/.#.#/...#/..##
..#/.#./#.. => #.#./.##./####/....
#.#/.#./#.. => ##../###./.#../##..
.##/.#./#.. => ###./.#../...#/....
###/.#./#.. => .#../.###/##../##.#
.##/##./#.. => .#../#..#/.###/#...
###/##./#.. => ..../.##./##../...#
#../..#/#.. => ##.#/...#/.###/##.#
.#./..#/#.. => ##../##../..../#.#.
##./..#/#.. => ..##/.#../#.#./.#.#
#.#/..#/#.. => ..../..##/...#/...#
.##/..#/#.. => #.../..##/...#/####
###/..#/#.. => #.../..#./##.#/.#.#
#../#.#/#.. => ..##/#.../#..#/..#.
.#./#.#/#.. => #..#/#.../.##./#.##
##./#.#/#.. => ##.#/.##./##.#/...#
..#/#.#/#.. => ####/.#.#/.##./#.#.
#.#/#.#/#.. => #..#/.##./.##./.###
.##/#.#/#.. => ...#/...#/..../.##.
###/#.#/#.. => .#../###./..../.###
#../.##/#.. => ##.#/##../#.#./...#
.#./.##/#.. => ###./.#.#/#.##/####
##./.##/#.. => #.##/..#./.#../#..#
#.#/.##/#.. => #.#./..##/..##/.#.#
.##/.##/#.. => .#../.###/.###/#.##
###/.##/#.. => #.../##../#.#./.#..
#../###/#.. => #.#./###./.##./..#.
.#./###/#.. => #.../#.../.##./.#..
##./###/#.. => ..#./.###/..##/#...
..#/###/#.. => #.##/.#../###./.###
#.#/###/#.. => .#.#/#..#/###./##..
.##/###/#.. => #.#./#.##/..##/.#..
###/###/#.. => ##../#.../..#./#..#
.#./#.#/.#. => #..#/####/#.#./#..#
##./#.#/.#. => ..##/.#../##.#/#..#
#.#/#.#/.#. => ####/#.#./#..#/#.#.
###/#.#/.#. => #.../##.#/..../#...
.#./###/.#. => ..##/.##./####/.###
##./###/.#. => .##./..#./#.##/#..#
#.#/###/.#. => ##.#/##../####/...#
###/###/.#. => ..##/####/...#/.#..
#.#/..#/##. => #.##/.#.#/#.#./#.##
###/..#/##. => ...#/##.#/#..#/..#.
.##/#.#/##. => .#.#/..#./..../###.
###/#.#/##. => ###./####/##.#/#.##
#.#/.##/##. => ##.#/#.##/.##./##..
###/.##/##. => .#.#/#.#./###./####
.##/###/##. => .#../####/.#../....
###/###/##. => .#../..../##.#/.##.
#.#/.../#.# => #.../#.../..##/..##
###/.../#.# => ...#/..#./##.#/####
###/#../#.# => .###/..##/.#../....
#.#/.#./#.# => ###./####/.#../#..#
###/.#./#.# => #.../#.##/..../###.
###/##./#.# => .###/####/#..#/.###
#.#/#.#/#.# => .#.#/...#/.#.#/#.##
###/#.#/#.# => ..../..#./..#./####
#.#/###/#.# => ..##/...#/.#.#/.##.
###/###/#.# => .###/.##./..##/####
###/#.#/### => #.#./.#../.#.#/#.#.
###/###/### => #..#/##../#.#./####
